services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: demand-forecasting-postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./setup-database.ps1:/docker-entrypoint-initdb.d/setup-database.ps1  # (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .ps1 ‡∏ö‡∏ô image Linux)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: demand-forecasting-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-auth-service
    ports:
      - "6601:6601"
    environment:
      - PORT=6601
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - JWT_ACCESS_SECRET=NYr5g7vZIxvDja90w5UYoxIj-HxcYDyrBnKDRB9dQ-w
      - JWT_REFRESH_SECRET=0EnadxxwuzghQMsUDzbXxQLGx4rjqcNtUOJpkBmJYp0=
      # üîª ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      - EMAIL_ENABLED=false
      - EMAIL_VERIFICATION_REQUIRED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6601/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Service
  data-service:
    build:
      context: ./services/data-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-data-service
    ports:
      - "6603:6603"
    environment:
      - PORT=6603
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - AUTH_VALIDATE_URL=http://auth-service:6601/internal/validate
      - STATIC_API_KEY=sf_4e77abfe2e799431a21a9bf586f2a67fb518910e2f1b50c346b3b80fb9bdf5ca
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6603/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DIM Service
  dim-service:
    build:
      context: ./services/dim-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-dim-service
    ports:
      - "6604:6604"
    environment:
      - PORT=6604
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - AUTH_VALIDATE_URL=http://auth-service:6601/internal/validate
      - INGEST_UPLOAD_URL=http://ingest-service:6602/v1/upload
      - STATIC_API_KEY=sf_4e77abfe2e799431a21a9bf586f2a67fb518910e2f1b50c346b3b80fb9bdf5ca
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6604/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ingest Service
  ingest-service:
    build:
      context: ./services/ingest-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-ingest-service
    ports:
      - "6602:6602"
    environment:
      - PORT=6602
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - AUTH_VALIDATE_URL=http://auth-service:6601/internal/validate
      - API_KEY=sf_4e77abfe2e799431a21a9bf586f2a67fb518910e2f1b50c346b3b80fb9bdf5ca
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6602/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: demand-forecasting-frontend
    ports:
      - "6600:80"
    environment:
      - VITE_AUTH_URL=http://auth-service:6601
      - VITE_DATA_URL=http://data-service:6603
      - VITE_DIM_URL=http://dim-service:6604
      - VITE_INGEST_URL=http://ingest-service:6602
      - VITE_DATA_API_KEY=sf_4e77abfe2e799431a21a9bf586f2a67fb518910e2f1b50c346b3b80fb9bdf5ca
      - VITE_INGEST_API_KEY=sf_4e77abfe2e799431a21a9bf586f2a67fb518910e2f1b50c346b3b80fb9bdf5ca
    depends_on:
      - auth-service
      - data-service
      - dim-service
      - ingest-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin4
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    ports:
      - "5050:80"               # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö UI ‡∏ó‡∏µ‡πà http://localhost:5050
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin1234
      PGADMIN_CONFIG_SERVER_MODE: 'False'  # single user
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      # (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡πà‡∏ô) auto-register server ‚Äî ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏ß‡πâ
      # - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - default            # ‚úÖ ‡πÉ‡∏ä‡πâ default network (‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô demand-forecasting-network ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  default:
    name: demand-forecasting-network
