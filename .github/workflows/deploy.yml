name: Deploy to Cloud

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          services/*/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Backend Dependencies
      run: |
        for service in services/*; do
          if [ -f "$service/package.json" ]; then
            cd "$service"
            npm ci
            cd ../..
          fi
        done
    
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
    
    - name: Build Backend Services
      run: |
        for service in services/*; do
          if [ -f "$service/package.json" ]; then
            cd "$service"
            npm run build
            cd ../..
          fi
        done
    
    - name: Run Tests
      run: |
        # Add your test commands here
        echo "Running tests..."

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Auth Service
      uses: docker/build-push-action@v5
      with:
        context: ./services/auth-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Data Service
      uses: docker/build-push-action@v5
      with:
        context: ./services/data-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-service:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push DIM Service
      uses: docker/build-push-action@v5
      with:
        context: ./services/dim-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dim-service:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Ingest Service
      uses: docker/build-push-action@v5
      with:
        context: ./services/ingest-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ingest-service:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
    
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|your-registry/|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/|g" k8s/*.yaml
        sed -i "s|:latest|:${{ github.sha }}|g" k8s/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/auth-service.yaml
        kubectl apply -f k8s/data-service.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/ingest.yaml
        kubectl apply -f k8s/dim-service.yaml
        kubectl apply -f k8s/ingress.yaml
    
    - name: Verify deployment
      run: |
        kubectl get pods -n demand-forecasting
        kubectl get services -n demand-forecasting
