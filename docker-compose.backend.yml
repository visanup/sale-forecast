version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: demand-forecasting-postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Logging
  redis:
    image: redis:7-alpine
    container_name: demand-forecasting-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-auth-service
    ports:
      - "6601:6601"
    environment:
      - PORT=6601
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - JWT_ACCESS_SECRET=NYr5g7vZIxvDja90w5UYoxIj-HxcYDyrBnKDRB9dQ-w
      - JWT_REFRESH_SECRET=0EnadxxwuzghQMsUDzbXxQLGx4rjqcNtUOJpkBmJYp0=
      - CORS_ORIGINS=http://localhost:6600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6601/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Service
  data-service:
    build:
      context: ./services/data-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-data-service
    ports:
      - "6603:6603"
    environment:
      - PORT=6603
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - AUTH_VALIDATE_URL=http://auth-service:6601/internal/validate
      - CORS_ORIGINS=http://localhost:6600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6603/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DIM Service
  dim-service:
    build:
      context: ./services/dim-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-dim-service
    ports:
      - "6604:6604"
    environment:
      - PORT=6604
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - AUTH_VALIDATE_URL=http://auth-service:6601/internal/validate
      - CORS_ORIGINS=http://localhost:6600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6604/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ingest Service
  ingest-service:
    build:
      context: ./services/ingest-service
      dockerfile: Dockerfile
    container_name: demand-forecasting-ingest-service
    ports:
      - "6602:6602"
    environment:
      - PORT=6602
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INTERNAL_SHARED_SECRET=dev-internal-secret
      - AUTH_VALIDATE_URL=http://auth-service:6601/internal/validate
      - CORS_ORIGINS=http://localhost:6600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6602/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
